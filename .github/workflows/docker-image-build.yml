name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  set-newversion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.newversion.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set variable
        id: newversion
        run: echo "version=$(cat .version | awk -F. '{$NF = $NF + 1;} 1' OFS=.)" >> $GITHUB_OUTPUT
  test-app:
    runs-on: ubuntu-latest
    needs: [set-newversion]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build the Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        tags: |
          ${{ vars.IMAGE_TAG }}:${{ needs.set-newversion.outputs.version }}
          ${{ vars.IMAGE_TAG }}:latest
      
    - name: Test Docker container
      run: |
        docker run -d --name test-app -p $APP_PORT:$APP_PORT -e EXPORTER_PORT=$APP_PORT -e INFISICAL_URL='${{ env.INFISICAL_URL }}' -e INFISICAL_PROJECT_ID='${{ env.INFISICAL_PROJECT_ID }}' -e INFISICAL_ENV='${{ env.INFISICAL_ENV }}' -e INFISICAL_CLIENT_ID='${{ env.INFISICAL_CLIENT_ID }}' -e INFISICAL_CLIENT_SECRET='${{ env.INFISICAL_CLIENT_SECRET }}' ${{ vars.IMAGE_TAG }}:${{ needs.set-newversion.outputs.version }}
        sleep 5
        if curl -s http://localhost:$APP_PORT >/dev/null; then
          echo "App is running on port $APP_PORT"
          docker stop test-app
          docker rm test-app
        else
          echo "App failed to start on port $APP_PORT"
          docker stop test-app
          docker rm test-app
          exit 1
        fi
      env:
        INFISICAL_URL: ${{ secrets.INFISICAL_URL }}
        INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        INFISICAL_ENV: ${{ secrets.INFISICAL_ENV }}
        INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
        INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
        APP_PORT: ${{ vars.APP_PORT }}
  update-version:
    runs-on: ubuntu-latest
    needs: [set-newversion, test-app]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
    - name: Increment version
      run: |
        echo ${{ needs.set-newversion.outputs.version }} > .version
    - name: Commit and push version update
      run: |
        NEW_VERSION=$(cat .version)
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .version
        git commit -m "Increment version to ${{ needs.set-newversion.outputs.version }} [skip ci]"
        git push origin main
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
  push-app:
    runs-on: ubuntu-latest
    needs: [set-newversion, test-app]

    steps:
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Build the Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ vars.IMAGE_TAG }}:${{ needs.set-newversion.outputs.version }}
          ${{ vars.IMAGE_TAG }}:latest